buildscript {
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.2"
    }
}

plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
    id 'org.flywaydb.flyway' version '5.2.4'
    id "com.adarshr.test-logger" version "2.0.0"
    id "com.github.spotbugs" version "1.7.1"
    id "jacoco"
    id 'pmd'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    set('springCloudVersion', "Greenwich.SR1")
    set('junitVersion', "5.5.0")
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'com.h2database:h2'
    implementation "com.zaxxer:HikariCP:3.2.0"
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.postgresql:postgresql:42.2.2'
    implementation 'com.graphql-java:graphql-java:11.0' // NEW
    implementation 'com.graphql-java:graphql-java-spring-boot-starter-webmvc:1.0' // NEW
    implementation 'com.google.guava:guava:26.0-jre' // NEW

    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'com.h2database:h2'
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.16.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.platform:junit-platform-runner'
    testImplementation ('org.junit.jupiter:junit-jupiter-params')
    testImplementation ('org.junit.platform:junit-platform-launcher')

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.junit:junit-bom:${junitVersion}"
    }
}

// junit 5 begin
test {
    useJUnitPlatform()
}
// junit5 end

// test logger begin
testlogger {
    // pick a theme - mocha, standard, plain, mocha-parallel, standard-parallel or plain-parallel
    theme 'standard'

    // set to false to disable detailed failure logs
    showExceptions true

    // set to false to hide stack traces
    showStackTraces true

    // set to true to remove any filtering applied to stack traces
    showFullStackTraces false

    // set to false to hide exception causes
    showCauses true

    // set threshold in milliseconds to highlight slow tests
    slowThreshold 2000

    // displays a breakdown of passes, failures and skips along with total duration
    showSummary true

    // set to true to see simple class names
    showSimpleNames false

    // set to false to hide passed tests
    showPassed true

    // set to false to hide skipped tests
    showSkipped true

    // set to false to hide failed tests
    showFailed true

    // enable to see standard out and error streams inline with the test results
    showStandardStreams false

    // set to false to hide passed standard out and error streams
    showPassedStandardStreams true

    // set to false to hide skipped standard out and error streams
    showSkippedStandardStreams true

    // set to false to hide failed standard out and error streams
    showFailedStandardStreams true
}

// test logger end

// PMD begin
pmd {
    toolVersion = '6.19.0'
    consoleOutput = true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}
// PMD end

// spot bugs begin
spotbugs {
    toolVersion = '3.1.12'
    ignoreFailures = true
    effort = 'max'
    showProgress = true
}

sourceSets {
    // we define `main` sourceSet here, so SpotBugs Gradle Plugin generates `spotbugsMain` task
    main {
        java.srcDirs = ['src/main/java']
    }
}

spotbugs {
    ignoreFailures = false
    effort = "max"
    reportLevel = "medium"
//    visitors = ["FindSqlInjection", "SwitchFallthrough"]
//    omitVisitors = ["FindNonShortCircuit"]
//    includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
//    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

// To generate an HTML report instead of XML
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
// Spot bugs end

// jacoco begin
jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**', '**/*DTO*', '**/*Exception*', '**/Application*', '**/domain/**', '**/config/**', '**/**ExceptionHandler*'
            ])
        })
    }
}
jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**', '**/*DTO*', '**/*Exception*', '**/Application*', '**/domain/**', '**/config/**', '**/**ExceptionHandler*'
            ])
        })
    }
    violationRules {
        rule {
            limit {
                minimum = 0.34
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification
// jacoco end
